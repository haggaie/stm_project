#! /usr/bin/env python 

import sys
import os
import re

def parse_args(args):
    cur_opt = None
    Options = {"-o" : None, "-L" : [] }
    remaining = []
    for arg in args:
        if arg.startswith("-o"):
            if arg == "-o":
                cur_opt = arg
            else:
                Options["-o"] = arg[2:]
        elif cur_opt == "-o":
            Options[cur_opt] = arg
            cur_opt = None
        elif arg.startswith("-L"):
            Options["-L"].append(arg[2:])
        else:
            remaining.append(arg)
    return (Options, remaining)
        

Linker = 'llvm-ld'
Opt = 'opt'
TangerPath = '/users/haggaie/stm_project/tanger/Release/lib/'
TangerPass = TangerPath + "libtanger.so"
TangerPassOpts = [] # ['-debug', '-stats']

def error(msg):
    print msg
    sys.exit(1)

def spawn(cmd, args):
    args.insert(0, cmd)
    print " ".join(args)
    return os.spawnvp(os.P_WAIT, cmd, args)

def tempfile(prefix):
    import tempfile
    (handle, filename) = tempfile.mkstemp(prefix)
    os.close(handle)
    return filename

def temporary_link(args):
    filename = tempfile(".tanger-base.bc")
    args = args + ["-o",filename, "-link-as-library", "-disable-inlining"]
    ret = spawn(Linker, args)
    if ret != 0:
        error("Error in linker (%d)" % ret)
    return filename

def run_tanger(infile):
    outfile = tempfile(".tanger.bc")
    args = ['-load', TangerPass, '-tanger', infile, '-o', outfile, '-f'] + TangerPassOpts
    if spawn(Opt, args) != 0:
        error("Error in tanger pass")
    return outfile

def link_native(infile, outfile, libdirs):
    args = ['-native', infile, '-o', outfile] + ["-L" + dir for dir in libdirs]
    if spawn(Linker, args) != 0:
        error("Error in tanger pass")
    return outfile

def main():
    (options, args) = parse_args(sys.argv[1:])
    if not options.has_key("-o"):
        error("No -o option")
    temp_link_file = temporary_link(args)
    temp_tanger_file = run_tanger(temp_link_file)
    link_native(temp_tanger_file, options["-o"], options["-L"])
    os.unlink(temp_link_file)
    os.unlink(temp_tanger_file)

if __name__ == "__main__":
    main()
